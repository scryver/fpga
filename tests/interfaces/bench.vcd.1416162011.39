$date
    Sun Nov 16 19:20:11 2014
$end
$version
    MyHDL 0.8.1
$end
$timescale
    1ns
$end

$scope module bench $end
$var reg 1 ! reset $end
$var reg 3 " ws_count $end
$var reg 6 # right $end
$var reg 1 $ sdata $end
$var reg 24 % sdata_pipe $end
$var reg 1 & right_ready $end
$var reg 1 ' sdata_out $end
$var reg 1 ( left_ready $end
$var reg 1 ) ws $end
$var reg 1 * sclk $end
$var reg 6 + left $end
$scope module ws_gen $end
$var reg 1 ) clockdivided $end
$var reg 3 " counter $end
$upscope $end
$scope module clockgen $end
$var reg 1 * clock $end
$upscope $end
$scope module receiver $end
$var reg 1 ! reset $end
$var reg 6 # right $end
$var reg 1 , wsd $end
$var reg 1 $ sdata $end
$var reg 1 - wsp $end
$var reg 1 & right_ready $end
$var reg 1 . nwsd $end
$var reg 1 ( left_ready $end
$var reg 1 ) ws $end
$var reg 1 * sclk $end
$var reg 6 / buf $end
$var reg 6 + left $end
$scope module s2p $end
$var reg 1 * sclk $end
$var reg 6 / dout $end
$var reg 1 $ sdata $end
$var reg 1 - start $end
$var reg 1 0 en(0) $end
$var reg 1 1 en(1) $end
$var reg 1 2 en(2) $end
$var reg 1 3 en(3) $end
$var reg 1 4 en(4) $end
$var reg 1 5 buf(0) $end
$var reg 1 6 buf(1) $end
$var reg 1 7 buf(2) $end
$var reg 1 8 buf(3) $end
$var reg 1 9 buf(4) $end
$var reg 1 : buf(5) $end
$scope module bufs_4 $end
$var reg 1 5 q $end
$var reg 1 - rst $end
$var reg 1 0 enable $end
$var reg 1 $ d $end
$var reg 1 * clk $end
$upscope $end
$scope module bufs_3 $end
$var reg 1 6 q $end
$var reg 1 - rst $end
$var reg 1 1 enable $end
$var reg 1 $ d $end
$var reg 1 * clk $end
$upscope $end
$scope module bufs_2 $end
$var reg 1 7 q $end
$var reg 1 - rst $end
$var reg 1 2 enable $end
$var reg 1 $ d $end
$var reg 1 * clk $end
$upscope $end
$scope module bufs_1 $end
$var reg 1 8 q $end
$var reg 1 - rst $end
$var reg 1 3 enable $end
$var reg 1 $ d $end
$var reg 1 * clk $end
$upscope $end
$scope module bufs_0 $end
$var reg 1 9 q $end
$var reg 1 - rst $end
$var reg 1 4 enable $end
$var reg 1 $ d $end
$var reg 1 * clk $end
$upscope $end
$scope module shifts_3 $end
$var reg 1 0 q $end
$var reg 1 - rst $end
$var reg 1 1 d $end
$var reg 1 * clk $end
$upscope $end
$scope module shifts_2 $end
$var reg 1 1 q $end
$var reg 1 - rst $end
$var reg 1 2 d $end
$var reg 1 * clk $end
$upscope $end
$scope module shifts_1 $end
$var reg 1 2 q $end
$var reg 1 - rst $end
$var reg 1 3 d $end
$var reg 1 * clk $end
$upscope $end
$scope module shifts_0 $end
$var reg 1 3 q $end
$var reg 1 - rst $end
$var reg 1 4 d $end
$var reg 1 * clk $end
$upscope $end
$scope module buf_msb $end
$var reg 1 : q $end
$var reg 1 - enable $end
$var reg 1 $ d $end
$var reg 1 * clk $end
$upscope $end
$scope module shift_msb $end
$var reg 1 4 q $end
$var reg 1 - s $end
$var reg 1 * clk $end
$upscope $end
$upscope $end
$scope module ws_select $end
$var reg 1 , wsd $end
$var reg 1 * sclk $end
$var reg 1 . nwsd $end
$var reg 1 - wsp $end
$var reg 1 ; wsdd $end
$var reg 1 ) ws $end
$upscope $end
$upscope $end
$scope module transmitter $end
$var reg 1 ! reset $end
$var reg 1 & load_right $end
$var reg 6 # right $end
$var reg 1 ( load_left $end
$var reg 1 ' sdata $end
$var reg 6 < right_buf $end
$var reg 1 * sclk $end
$var reg 1 = nwsd $end
$var reg 1 > wsp $end
$var reg 6 ? left_right $end
$var reg 1 ) ws $end
$var reg 6 @ left_buf $end
$var reg 6 + left $end
$var reg 1 A wsd $end
$scope module shifter $end
$var reg 1 > load $end
$var reg 1 ! reset $end
$var reg 1 ' sdata $end
$var reg 1 * sclk $end
$var reg 6 B buf $end
$var reg 6 ? parallel_in $end
$upscope $end
$scope module ws_select $end
$var reg 1 A wsd $end
$var reg 1 * sclk $end
$var reg 1 = nwsd $end
$var reg 1 > wsp $end
$var reg 1 C wsdd $end
$var reg 1 ) ws $end
$upscope $end
$scope module right_buffer $end
$var reg 1 & load $end
$var reg 1 ! reset $end
$var reg 6 < dout $end
$var reg 1 * sclk $end
$var reg 1 A output_enable $end
$var reg 6 D buf $end
$var reg 6 # parallel_in $end
$var reg 1 > wait $end
$upscope $end
$scope module left_buffer $end
$var reg 1 ( load $end
$var reg 1 ! reset $end
$var reg 6 @ dout $end
$var reg 1 * sclk $end
$var reg 1 = output_enable $end
$var reg 6 E buf $end
$var reg 6 + parallel_in $end
$var reg 1 > wait $end
$upscope $end
$upscope $end
$upscope $end

$enddefinitions $end
$dumpvars
0!
b000 "
b000000 #
0$
b000000000000000000000000 %
0&
0'
0(
0)
0*
b000000 +
0,
0-
0.
b000000 /
00
01
02
03
04
05
06
07
08
09
0:
0;
b000000 <
0=
0>
b000000 ?
b000000 @
0A
b000000 B
0C
b000000 D
b000000 E
$end
1(
1&
#10
1*
1=
1.
#20
0*
b001 "
1$
#30
1*
#40
0*
0$
b100000000000000000000000 %
b010 "
#50
1*
#60
0*
b011 "
1$
b010000000000000000000000 %
#70
1*
#80
0*
b101000000000000000000000 %
b100 "
#90
1*
#100
0*
b101 "
0$
b110100000000000000000000 %
#110
1*
#120
0*
1$
b011010000000000000000000 %
b000 "
1)
#130
1*
1A
0=
1,
0.
1-
1>
0&
#140
0*
b001 "
b101101000000000000000000 %
#150
1*
1:
14
1;
1C
0>
0-
1&
#160
0*
0$
b110110100000000000000000 %
b010 "
#170
1*
04
13
#180
0*
b011 "
1$
b011011010000000000000000 %
#190
1*
18
12
03
#200
0*
b101101101000000000000000 %
b100 "
#210
1*
02
11
17
#220
0*
b101 "
b110110110100000000000000 %
#230
1*
16
10
01
#240
0*
b111011011010000000000000 %
b000 "
0)
#250
1*
0A
1=
0,
1.
00
15
1-
1>
0(
#260
0*
b001 "
b111101101101000000000000 %
#270
1*
b111101 /
05
06
07
08
14
0;
0C
0>
0-
1(
#280
0*
0$
b111110110110100000000000 %
b010 "
#290
1*
04
13
#300
0*
b011 "
1$
b011111011011010000000000 %
#310
1*
18
12
03
#320
0*
b101111101101101000000000 %
b100 "
#330
1*
02
11
17
#340
0*
b101 "
0$
b110111110110110100000000 %
#350
1*
10
01
#360
0*
b011011111011011010000000 %
b000 "
1)
#370
1*
1A
0=
1,
0.
00
1-
1>
0&
#380
0*
b001 "
1$
b001101111101101101000000 %
#390
1*
b111101 #
b001101 /
07
08
14
1;
1C
0>
0-
1&
#400
0*
b100110111110110110100000 %
b010 "
#410
1*
04
13
19
#420
0*
b011 "
b110011011111011011010000 %
#430
1*
18
12
03
#440
0*
0$
b111001101111101101101000 %
b100 "
#450
1*
02
11
#460
0*
b101 "
b011100110111110110110100 %
#470
1*
10
01
#480
0*
1$
b001110011011111011011010 %
b000 "
0)
#490
1*
0A
1=
0,
1.
00
15
1-
1>
0(
#500
0*
b001 "
0$
b100111001101111101101101 %
#510
1*
b001101 +
b100111 /
05
08
09
0:
14
0;
0C
0>
0-
1(
#520
0*
1$
b010011100110111110110110 %
b010 "
#530
1*
b111101 D
04
13
19
#540
0*
b011 "
0$
b101001110011011111011011 %
#550
1*
12
03
#560
0*
b010100111001101111101101 %
b100 "
#570
1*
02
11
#580
0*
b101 "
b001010011100110111110110 %
#590
1*
10
01
#600
0*
1$
b000101001110011011111011 %
b000 "
1)
#610
1*
