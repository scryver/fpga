-- File: Receiver.vhd
-- Generated by MyHDL 0.8.1
-- Date: Sun Nov 16 19:25:35 2014


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_081.all;

entity Receiver is
    port (
        sdata: in std_logic;
        ws: in std_logic;
        left: out unsigned(31 downto 0);
        right: out unsigned(31 downto 0);
        left_ready: out std_logic;
        right_ready: out std_logic;
        sclk: in std_logic;
        reset: in std_logic
    );
end entity Receiver;


architecture MyHDL of Receiver is


constant MAX: integer := 1;
constant M: integer := 2**5;
constant d: integer := 0;



signal wsd: std_logic;
signal wsp: std_logic;
signal nwsd: std_logic;
signal buf: unsigned(31 downto 0);
signal s2p_bufs_30_enable: std_logic;
signal s2p_bufs_29_enable: std_logic;
signal s2p_bufs_28_enable: std_logic;
signal s2p_bufs_27_enable: std_logic;
signal s2p_bufs_26_enable: std_logic;
signal s2p_bufs_25_enable: std_logic;
signal s2p_bufs_24_enable: std_logic;
signal s2p_bufs_23_enable: std_logic;
signal s2p_bufs_22_enable: std_logic;
signal s2p_bufs_21_enable: std_logic;
signal s2p_bufs_20_enable: std_logic;
signal s2p_bufs_19_enable: std_logic;
signal s2p_bufs_18_enable: std_logic;
signal s2p_bufs_17_enable: std_logic;
signal s2p_bufs_16_enable: std_logic;
signal s2p_bufs_15_enable: std_logic;
signal s2p_bufs_14_enable: std_logic;
signal s2p_bufs_13_enable: std_logic;
signal s2p_bufs_12_enable: std_logic;
signal s2p_bufs_11_enable: std_logic;
signal s2p_bufs_10_enable: std_logic;
signal s2p_bufs_9_enable: std_logic;
signal s2p_bufs_8_enable: std_logic;
signal s2p_bufs_7_enable: std_logic;
signal s2p_bufs_6_enable: std_logic;
signal s2p_bufs_5_enable: std_logic;
signal s2p_bufs_4_enable: std_logic;
signal s2p_bufs_3_enable: std_logic;
signal s2p_bufs_2_enable: std_logic;
signal s2p_bufs_1_enable: std_logic;
signal s2p_bufs_0_enable: std_logic;
signal ws_select_wsdd: std_logic;
type t_array_s2p_buf is array(0 to 32-1) of std_logic;
signal s2p_buf: t_array_s2p_buf;

begin




RECEIVER_WS_SELECT_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        wsd <= ws;
        nwsd <= stdl((not bool(ws)));
        ws_select_wsdd <= wsd;
    end if;
end process RECEIVER_WS_SELECT_LOGIC;



wsp <= (wsd xor ws_select_wsdd);


RECEIVER_S2P_SHIFT_MSB_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_0_enable <= '1';
        else
            s2p_bufs_0_enable <= '0';
        end if;
    end if;
end process RECEIVER_S2P_SHIFT_MSB_LOGIC;


RECEIVER_S2P_SHIFTS_0_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_1_enable <= '0';
        else
            s2p_bufs_1_enable <= s2p_bufs_0_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_0_LOGIC;


RECEIVER_S2P_SHIFTS_1_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_2_enable <= '0';
        else
            s2p_bufs_2_enable <= s2p_bufs_1_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_1_LOGIC;


RECEIVER_S2P_SHIFTS_2_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_3_enable <= '0';
        else
            s2p_bufs_3_enable <= s2p_bufs_2_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_2_LOGIC;


RECEIVER_S2P_SHIFTS_3_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_4_enable <= '0';
        else
            s2p_bufs_4_enable <= s2p_bufs_3_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_3_LOGIC;


RECEIVER_S2P_SHIFTS_4_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_5_enable <= '0';
        else
            s2p_bufs_5_enable <= s2p_bufs_4_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_4_LOGIC;


RECEIVER_S2P_SHIFTS_5_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_6_enable <= '0';
        else
            s2p_bufs_6_enable <= s2p_bufs_5_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_5_LOGIC;


RECEIVER_S2P_SHIFTS_6_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_7_enable <= '0';
        else
            s2p_bufs_7_enable <= s2p_bufs_6_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_6_LOGIC;


RECEIVER_S2P_SHIFTS_7_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_8_enable <= '0';
        else
            s2p_bufs_8_enable <= s2p_bufs_7_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_7_LOGIC;


RECEIVER_S2P_SHIFTS_8_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_9_enable <= '0';
        else
            s2p_bufs_9_enable <= s2p_bufs_8_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_8_LOGIC;


RECEIVER_S2P_SHIFTS_9_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_10_enable <= '0';
        else
            s2p_bufs_10_enable <= s2p_bufs_9_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_9_LOGIC;


RECEIVER_S2P_SHIFTS_10_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_11_enable <= '0';
        else
            s2p_bufs_11_enable <= s2p_bufs_10_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_10_LOGIC;


RECEIVER_S2P_SHIFTS_11_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_12_enable <= '0';
        else
            s2p_bufs_12_enable <= s2p_bufs_11_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_11_LOGIC;


RECEIVER_S2P_SHIFTS_12_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_13_enable <= '0';
        else
            s2p_bufs_13_enable <= s2p_bufs_12_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_12_LOGIC;


RECEIVER_S2P_SHIFTS_13_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_14_enable <= '0';
        else
            s2p_bufs_14_enable <= s2p_bufs_13_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_13_LOGIC;


RECEIVER_S2P_SHIFTS_14_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_15_enable <= '0';
        else
            s2p_bufs_15_enable <= s2p_bufs_14_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_14_LOGIC;


RECEIVER_S2P_SHIFTS_15_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_16_enable <= '0';
        else
            s2p_bufs_16_enable <= s2p_bufs_15_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_15_LOGIC;


RECEIVER_S2P_SHIFTS_16_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_17_enable <= '0';
        else
            s2p_bufs_17_enable <= s2p_bufs_16_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_16_LOGIC;


RECEIVER_S2P_SHIFTS_17_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_18_enable <= '0';
        else
            s2p_bufs_18_enable <= s2p_bufs_17_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_17_LOGIC;


RECEIVER_S2P_SHIFTS_18_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_19_enable <= '0';
        else
            s2p_bufs_19_enable <= s2p_bufs_18_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_18_LOGIC;


RECEIVER_S2P_SHIFTS_19_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_20_enable <= '0';
        else
            s2p_bufs_20_enable <= s2p_bufs_19_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_19_LOGIC;


RECEIVER_S2P_SHIFTS_20_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_21_enable <= '0';
        else
            s2p_bufs_21_enable <= s2p_bufs_20_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_20_LOGIC;


RECEIVER_S2P_SHIFTS_21_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_22_enable <= '0';
        else
            s2p_bufs_22_enable <= s2p_bufs_21_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_21_LOGIC;


RECEIVER_S2P_SHIFTS_22_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_23_enable <= '0';
        else
            s2p_bufs_23_enable <= s2p_bufs_22_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_22_LOGIC;


RECEIVER_S2P_SHIFTS_23_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_24_enable <= '0';
        else
            s2p_bufs_24_enable <= s2p_bufs_23_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_23_LOGIC;


RECEIVER_S2P_SHIFTS_24_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_25_enable <= '0';
        else
            s2p_bufs_25_enable <= s2p_bufs_24_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_24_LOGIC;


RECEIVER_S2P_SHIFTS_25_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_26_enable <= '0';
        else
            s2p_bufs_26_enable <= s2p_bufs_25_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_25_LOGIC;


RECEIVER_S2P_SHIFTS_26_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_27_enable <= '0';
        else
            s2p_bufs_27_enable <= s2p_bufs_26_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_26_LOGIC;


RECEIVER_S2P_SHIFTS_27_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_28_enable <= '0';
        else
            s2p_bufs_28_enable <= s2p_bufs_27_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_27_LOGIC;


RECEIVER_S2P_SHIFTS_28_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_29_enable <= '0';
        else
            s2p_bufs_29_enable <= s2p_bufs_28_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_28_LOGIC;


RECEIVER_S2P_SHIFTS_29_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_bufs_30_enable <= '0';
        else
            s2p_bufs_30_enable <= s2p_bufs_29_enable;
        end if;
    end if;
end process RECEIVER_S2P_SHIFTS_29_LOGIC;


RECEIVER_S2P_BUF_MSB_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(31) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUF_MSB_LOGIC;


RECEIVER_S2P_BUFS_0_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(30) <= '0';
        elsif bool(s2p_bufs_0_enable) then
            s2p_buf(30) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_0_LOGIC;


RECEIVER_S2P_BUFS_1_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(29) <= '0';
        elsif bool(s2p_bufs_1_enable) then
            s2p_buf(29) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_1_LOGIC;


RECEIVER_S2P_BUFS_2_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(28) <= '0';
        elsif bool(s2p_bufs_2_enable) then
            s2p_buf(28) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_2_LOGIC;


RECEIVER_S2P_BUFS_3_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(27) <= '0';
        elsif bool(s2p_bufs_3_enable) then
            s2p_buf(27) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_3_LOGIC;


RECEIVER_S2P_BUFS_4_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(26) <= '0';
        elsif bool(s2p_bufs_4_enable) then
            s2p_buf(26) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_4_LOGIC;


RECEIVER_S2P_BUFS_5_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(25) <= '0';
        elsif bool(s2p_bufs_5_enable) then
            s2p_buf(25) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_5_LOGIC;


RECEIVER_S2P_BUFS_6_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(24) <= '0';
        elsif bool(s2p_bufs_6_enable) then
            s2p_buf(24) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_6_LOGIC;


RECEIVER_S2P_BUFS_7_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(23) <= '0';
        elsif bool(s2p_bufs_7_enable) then
            s2p_buf(23) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_7_LOGIC;


RECEIVER_S2P_BUFS_8_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(22) <= '0';
        elsif bool(s2p_bufs_8_enable) then
            s2p_buf(22) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_8_LOGIC;


RECEIVER_S2P_BUFS_9_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(21) <= '0';
        elsif bool(s2p_bufs_9_enable) then
            s2p_buf(21) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_9_LOGIC;


RECEIVER_S2P_BUFS_10_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(20) <= '0';
        elsif bool(s2p_bufs_10_enable) then
            s2p_buf(20) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_10_LOGIC;


RECEIVER_S2P_BUFS_11_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(19) <= '0';
        elsif bool(s2p_bufs_11_enable) then
            s2p_buf(19) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_11_LOGIC;


RECEIVER_S2P_BUFS_12_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(18) <= '0';
        elsif bool(s2p_bufs_12_enable) then
            s2p_buf(18) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_12_LOGIC;


RECEIVER_S2P_BUFS_13_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(17) <= '0';
        elsif bool(s2p_bufs_13_enable) then
            s2p_buf(17) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_13_LOGIC;


RECEIVER_S2P_BUFS_14_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(16) <= '0';
        elsif bool(s2p_bufs_14_enable) then
            s2p_buf(16) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_14_LOGIC;


RECEIVER_S2P_BUFS_15_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(15) <= '0';
        elsif bool(s2p_bufs_15_enable) then
            s2p_buf(15) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_15_LOGIC;


RECEIVER_S2P_BUFS_16_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(14) <= '0';
        elsif bool(s2p_bufs_16_enable) then
            s2p_buf(14) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_16_LOGIC;


RECEIVER_S2P_BUFS_17_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(13) <= '0';
        elsif bool(s2p_bufs_17_enable) then
            s2p_buf(13) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_17_LOGIC;


RECEIVER_S2P_BUFS_18_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(12) <= '0';
        elsif bool(s2p_bufs_18_enable) then
            s2p_buf(12) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_18_LOGIC;


RECEIVER_S2P_BUFS_19_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(11) <= '0';
        elsif bool(s2p_bufs_19_enable) then
            s2p_buf(11) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_19_LOGIC;


RECEIVER_S2P_BUFS_20_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(10) <= '0';
        elsif bool(s2p_bufs_20_enable) then
            s2p_buf(10) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_20_LOGIC;


RECEIVER_S2P_BUFS_21_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(9) <= '0';
        elsif bool(s2p_bufs_21_enable) then
            s2p_buf(9) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_21_LOGIC;


RECEIVER_S2P_BUFS_22_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(8) <= '0';
        elsif bool(s2p_bufs_22_enable) then
            s2p_buf(8) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_22_LOGIC;


RECEIVER_S2P_BUFS_23_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(7) <= '0';
        elsif bool(s2p_bufs_23_enable) then
            s2p_buf(7) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_23_LOGIC;


RECEIVER_S2P_BUFS_24_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(6) <= '0';
        elsif bool(s2p_bufs_24_enable) then
            s2p_buf(6) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_24_LOGIC;


RECEIVER_S2P_BUFS_25_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(5) <= '0';
        elsif bool(s2p_bufs_25_enable) then
            s2p_buf(5) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_25_LOGIC;


RECEIVER_S2P_BUFS_26_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(4) <= '0';
        elsif bool(s2p_bufs_26_enable) then
            s2p_buf(4) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_26_LOGIC;


RECEIVER_S2P_BUFS_27_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(3) <= '0';
        elsif bool(s2p_bufs_27_enable) then
            s2p_buf(3) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_27_LOGIC;


RECEIVER_S2P_BUFS_28_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(2) <= '0';
        elsif bool(s2p_bufs_28_enable) then
            s2p_buf(2) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_28_LOGIC;


RECEIVER_S2P_BUFS_29_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(1) <= '0';
        elsif bool(s2p_bufs_29_enable) then
            s2p_buf(1) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_29_LOGIC;


RECEIVER_S2P_BUFS_30_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            s2p_buf(0) <= '0';
        elsif bool(s2p_bufs_30_enable) then
            s2p_buf(0) <= sdata;
        end if;
    end if;
end process RECEIVER_S2P_BUFS_30_LOGIC;


RECEIVER_S2P_LOGIC: process (sclk) is
    variable t: unsigned(31 downto 0);
begin
    if rising_edge(sclk) then
        if bool(wsp) then
            t := to_unsigned(0, 32);
            for i in 0 to M-1 loop
                t(i) := s2p_buf(i);
            end loop;
            buf <= t;
        end if;
    end if;
end process RECEIVER_S2P_LOGIC;


RECEIVER_CLOCKED_LOGIC: process (sclk) is
begin
    if rising_edge(sclk) then
        if bool(reset) then
            left <= to_unsigned(0, 32);
            right <= to_unsigned(0, 32);
        else
            if (bool(nwsd) and bool(wsp)) then
                left <= buf;
            elsif (bool(wsd) and bool(wsp)) then
                right <= buf;
            end if;
        end if;
    end if;
end process RECEIVER_CLOCKED_LOGIC;



left_ready <= stdl((not (bool(nwsd) and bool(wsp))));
right_ready <= stdl((not (bool(wsd) and bool(wsp))));

end architecture MyHDL;
