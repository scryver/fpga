-- File: VGA_Controller.vhd
-- Generated by MyHDL 0.8.1
-- Date: Mon Nov 17 23:32:11 2014


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_081.all;

entity VGA_Controller is
    port (
        data: in std_logic_vector(2 downto 0);
        h_sync: out std_logic;
        v_sync: out std_logic;
        r: out std_logic_vector(7 downto 0);
        g: out std_logic_vector(7 downto 0);
        b: out std_logic_vector(7 downto 0);
        clk: in std_logic;
        rst: in std_logic
    );
end entity VGA_Controller;


architecture ScryverDesign of VGA_Controller is


constant WALL_X_L: integer := 2**5;
constant BALL_Y_T: integer := 238;
constant BALL_X_L: integer := 580;
constant VF: integer := 10;
constant HEIGTH: integer := 480;
constant HR: integer := 96;
constant PIXEL_PER_LINE: integer := 800;
constant BAR_X_L: integer := 600;
constant BAR_X_R: integer := 603;
constant BAR_Y_T: integer := 204;
constant LINES_PER_SCREEN: integer := 525;
constant WIDTH: integer := 640;
constant VR: integer := 2;
constant BALL_Y_B: integer := 245;
constant WALL_X_R: integer := 35;
constant BAR_Y_B: integer := 275;
constant HF: integer := 2**4;
constant BALL_X_R: integer := 587;
constant MAX_COLOR: integer := 2**8-1;



signal video_on: std_logic;
signal pixel_x: unsigned(9 downto 0);
signal pixel_y: unsigned(9 downto 0);
signal pixel_gen_blue: unsigned(7 downto 0);
signal pixel_gen_rnext: unsigned(7 downto 0);
signal pixel_gen_green: unsigned(7 downto 0);
signal pixel_gen_bnext: unsigned(7 downto 0);
signal pixel_gen_gnext: unsigned(7 downto 0);
signal pixel_gen_red: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_wall_r: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_bar_r: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_ball_r: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_ball_b: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_wall_g: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_wall_on: std_logic;
signal pixel_gen_pixel_gen_wall_b: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_bar_b: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_ball_on: std_logic;
signal pixel_gen_pixel_gen_bar_on: std_logic;
signal pixel_gen_pixel_gen_bar_g: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_ball_g: unsigned(7 downto 0);
signal vga_sync_vsync_reg: std_logic;
signal vga_sync_h_end: std_logic;
signal vga_sync_vs_next: std_logic;
signal vga_sync_v_end: std_logic;
signal vga_sync_hs_next: std_logic;
signal vga_sync_v_count: unsigned(9 downto 0);
signal vga_sync_hc_next: unsigned(9 downto 0);
signal vga_sync_vc_next: unsigned(9 downto 0);
signal vga_sync_h_count: unsigned(9 downto 0);
signal vga_sync_hsync_reg: std_logic;

begin




VGA_CONTROLLER_VGA_SYNC_CLOCKED_LOGIC: process (clk, rst) is
begin
    if bool(rst) then
        vga_sync_hsync_reg <= '0';
        vga_sync_vsync_reg <= '0';
        vga_sync_h_count <= to_unsigned(0, 10);
        vga_sync_v_count <= to_unsigned(0, 10);
    elsif rising_edge(clk) then
        vga_sync_hsync_reg <= vga_sync_hs_next;
        vga_sync_vsync_reg <= vga_sync_vs_next;
        vga_sync_h_count <= vga_sync_hc_next;
        vga_sync_v_count <= vga_sync_vc_next;
    end if;
end process VGA_CONTROLLER_VGA_SYNC_CLOCKED_LOGIC;



vga_sync_hs_next <= stdl(1) when ((signed(resize(vga_sync_h_count, 11)) >= (WIDTH + HF)) and (signed(resize(vga_sync_h_count, 11)) <= (((WIDTH + HF) + HR) - 1))) else stdl(0);
vga_sync_vs_next <= stdl(1) when ((signed(resize(vga_sync_v_count, 11)) >= (HEIGTH + VF)) and (signed(resize(vga_sync_v_count, 11)) <= (((HEIGTH + VF) + VR) - 1))) else stdl(0);
vga_sync_h_end <= stdl(1) when (signed(resize(vga_sync_h_count, 11)) = (PIXEL_PER_LINE - 1)) else stdl(0);
vga_sync_v_end <= stdl(1) when (signed(resize(vga_sync_v_count, 11)) = (LINES_PER_SCREEN - 1)) else stdl(0);
video_on <= stdl(1) when ((vga_sync_h_count < WIDTH) and (vga_sync_v_count < HEIGTH)) else stdl(0);
h_sync <= vga_sync_hsync_reg;
v_sync <= vga_sync_vsync_reg;
pixel_x <= vga_sync_h_count;
pixel_y <= vga_sync_v_count;


VGA_CONTROLLER_VGA_SYNC_HOR_COUNTER: process (vga_sync_h_count, vga_sync_h_end) is
begin
    if bool(vga_sync_h_end) then
        vga_sync_hc_next <= to_unsigned(0, 10);
    else
        vga_sync_hc_next <= (vga_sync_h_count + 1);
    end if;
end process VGA_CONTROLLER_VGA_SYNC_HOR_COUNTER;


VGA_CONTROLLER_VGA_SYNC_VER_COUNTER: process (vga_sync_v_count, vga_sync_h_end, vga_sync_v_end) is
begin
    if bool(vga_sync_h_end) then
        if bool(vga_sync_v_end) then
            vga_sync_vc_next <= to_unsigned(0, 10);
        else
            vga_sync_vc_next <= (vga_sync_v_count + 1);
        end if;
    else
        vga_sync_vc_next <= vga_sync_v_count;
    end if;
end process VGA_CONTROLLER_VGA_SYNC_VER_COUNTER;


VGA_CONTROLLER_PIXEL_GEN_LOGIC: process (clk, rst) is
begin
    if bool(rst) then
        pixel_gen_red <= to_unsigned(0, 8);
        pixel_gen_green <= to_unsigned(0, 8);
        pixel_gen_blue <= to_unsigned(0, 8);
    elsif rising_edge(clk) then
        pixel_gen_red <= pixel_gen_rnext;
        pixel_gen_green <= pixel_gen_gnext;
        pixel_gen_blue <= pixel_gen_bnext;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_LOGIC;



r <= std_logic_vector(pixel_gen_red);
g <= std_logic_vector(pixel_gen_green);
b <= std_logic_vector(pixel_gen_blue);



pixel_gen_pixel_gen_wall_on <= stdl(1) when ((WALL_X_L <= pixel_x) and (pixel_x <= WALL_X_R)) else stdl(0);
pixel_gen_pixel_gen_wall_r <= to_unsigned(0, 8);
pixel_gen_pixel_gen_wall_g <= to_unsigned(0, 8);
pixel_gen_pixel_gen_wall_b <= to_unsigned(MAX_COLOR, 8);



pixel_gen_pixel_gen_bar_on <= stdl(1) when ((BAR_X_L <= pixel_x) and (pixel_x <= BAR_X_R) and (BAR_Y_T <= pixel_y) and (pixel_y <= BAR_Y_B)) else stdl(0);
pixel_gen_pixel_gen_bar_r <= to_unsigned(0, 8);
pixel_gen_pixel_gen_bar_g <= to_unsigned(MAX_COLOR, 8);
pixel_gen_pixel_gen_bar_b <= to_unsigned(0, 8);



pixel_gen_pixel_gen_ball_on <= stdl(1) when ((BALL_X_L <= pixel_x) and (pixel_x <= BALL_X_R) and (BALL_Y_T <= pixel_y) and (pixel_y <= BALL_Y_B)) else stdl(0);
pixel_gen_pixel_gen_ball_r <= to_unsigned(MAX_COLOR, 8);
pixel_gen_pixel_gen_ball_g <= to_unsigned(0, 8);
pixel_gen_pixel_gen_ball_b <= to_unsigned(0, 8);


VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_PIXEL_SELECT: process (video_on, pixel_gen_pixel_gen_wall_on, pixel_gen_pixel_gen_bar_on, pixel_gen_pixel_gen_ball_on, pixel_gen_pixel_gen_wall_r, pixel_gen_pixel_gen_wall_g, pixel_gen_pixel_gen_wall_b, pixel_gen_pixel_gen_bar_r, pixel_gen_pixel_gen_bar_g, pixel_gen_pixel_gen_bar_b, pixel_gen_pixel_gen_ball_r, pixel_gen_pixel_gen_ball_g, pixel_gen_pixel_gen_ball_b) is
begin
    if (not bool(video_on)) then
        pixel_gen_rnext <= to_unsigned(0, 8);
        pixel_gen_gnext <= to_unsigned(0, 8);
        pixel_gen_bnext <= to_unsigned(0, 8);
    else
        if bool(pixel_gen_pixel_gen_wall_on) then
            pixel_gen_rnext <= pixel_gen_pixel_gen_wall_r;
            pixel_gen_gnext <= pixel_gen_pixel_gen_wall_g;
            pixel_gen_bnext <= pixel_gen_pixel_gen_wall_b;
        elsif bool(pixel_gen_pixel_gen_bar_on) then
            pixel_gen_rnext <= pixel_gen_pixel_gen_bar_r;
            pixel_gen_gnext <= pixel_gen_pixel_gen_bar_g;
            pixel_gen_bnext <= pixel_gen_pixel_gen_bar_b;
        elsif bool(pixel_gen_pixel_gen_ball_on) then
            pixel_gen_rnext <= pixel_gen_pixel_gen_ball_r;
            pixel_gen_gnext <= pixel_gen_pixel_gen_ball_g;
            pixel_gen_bnext <= pixel_gen_pixel_gen_ball_b;
        else
            pixel_gen_rnext <= to_unsigned(MAX_COLOR / 4, 8);
            pixel_gen_gnext <= to_unsigned(MAX_COLOR / 4, 8);
            pixel_gen_bnext <= to_unsigned(MAX_COLOR / 4, 8);
        end if;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_PIXEL_SELECT;

end architecture ScryverDesign;
