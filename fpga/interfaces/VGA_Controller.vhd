-- File: VGA_Controller.vhd
-- Generated by MyHDL 0.8.1
-- Date: Tue Nov 18 00:54:05 2014


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_081.all;

entity VGA_Controller is
    port (
        data: in std_logic_vector(2 downto 0);
        h_sync: out std_logic;
        v_sync: out std_logic;
        r: out std_logic_vector(7 downto 0);
        g: out std_logic_vector(7 downto 0);
        b: out std_logic_vector(7 downto 0);
        clk: in std_logic;
        rst: in std_logic
    );
end entity VGA_Controller;


architecture ScryverDesign of VGA_Controller is


constant HEIGTH: integer := 480;
constant HR: integer := 96;
constant BALL_VELOCITY_NEG: integer := -2;
constant RED_BITS_MIN: integer := 2**4;
constant HF: integer := 2**4;
constant GREEN_BITS_MIN: integer := 8;
constant WALL_X_L: integer := 2**5;
constant COLOR_BITS: integer := 24;
constant BAR_X_L: integer := 600;
constant BAR_X_R: integer := 603;
constant WALL_X_R: integer := 35;
constant BALL_SIZE: integer := 8;
constant BAR_Y_SIZE: integer := 72;
constant VF: integer := 10;
constant PIXEL_PER_LINE: integer := 800;
constant HEIGHT: integer := 480;
constant VR: integer := 2;
constant BAR_VELOCITY: integer := 4;
constant WIDTH: integer := 640;
constant LINES_PER_SCREEN: integer := 525;
constant BALL_VELOCITY_POS: integer := 2;
constant MAX_COLOR: integer := 2**8-1;



signal video_on: std_logic;
signal pixel_x: unsigned(9 downto 0);
signal pixel_y: unsigned(9 downto 0);
signal pixel_gen_blue: unsigned(7 downto 0);
signal pixel_gen_rnext: unsigned(7 downto 0);
signal pixel_gen_green: unsigned(7 downto 0);
signal pixel_gen_bnext: unsigned(7 downto 0);
signal pixel_gen_gnext: unsigned(7 downto 0);
signal pixel_gen_red: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_wall_rgb: unsigned(23 downto 0);
signal pixel_gen_pixel_gen_ball_rgb: unsigned(23 downto 0);
signal pixel_gen_pixel_gen_refr_tick: std_logic;
signal pixel_gen_pixel_gen_bar_rgb: unsigned(23 downto 0);
signal pixel_gen_pixel_gen_rd_ball_on: std_logic;
signal pixel_gen_pixel_gen_bar_yb: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_wall_on: std_logic;
signal pixel_gen_pixel_gen_bar_yt: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_on: std_logic;
signal pixel_gen_pixel_gen_bar_on: std_logic;
signal pixel_gen_pixel_gen_bar_yreg: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_xreg: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_xr: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_yr_next: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_xd_next: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_xl: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_y_delta_reg: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_xr_next: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_rom_addr: unsigned(2 downto 0);
signal pixel_gen_pixel_gen_ball_logic_yd_next: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_x_delta_reg: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_yreg: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_rom_bit: std_logic;
signal pixel_gen_pixel_gen_ball_logic_rom_col: unsigned(2 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_yt: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_ball_logic_rom_data: unsigned(7 downto 0);
signal pixel_gen_pixel_gen_ball_logic_ball_yb: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_bar_logic_bar_yr_next: unsigned(9 downto 0);
signal pixel_gen_pixel_gen_bar_logic_bar_yreg: unsigned(9 downto 0);
signal vga_sync_vsync_reg: std_logic;
signal vga_sync_h_end: std_logic;
signal vga_sync_vs_next: std_logic;
signal vga_sync_v_end: std_logic;
signal vga_sync_hs_next: std_logic;
signal vga_sync_v_count: unsigned(9 downto 0);
signal vga_sync_hc_next: unsigned(9 downto 0);
signal vga_sync_vc_next: unsigned(9 downto 0);
signal vga_sync_h_count: unsigned(9 downto 0);
signal vga_sync_hsync_reg: std_logic;

begin




VGA_CONTROLLER_VGA_SYNC_CLOCKED_LOGIC: process (clk, rst) is
begin
    if bool(rst) then
        vga_sync_hsync_reg <= '0';
        vga_sync_vsync_reg <= '0';
        vga_sync_h_count <= to_unsigned(0, 10);
        vga_sync_v_count <= to_unsigned(0, 10);
    elsif rising_edge(clk) then
        vga_sync_hsync_reg <= vga_sync_hs_next;
        vga_sync_vsync_reg <= vga_sync_vs_next;
        vga_sync_h_count <= vga_sync_hc_next;
        vga_sync_v_count <= vga_sync_vc_next;
    end if;
end process VGA_CONTROLLER_VGA_SYNC_CLOCKED_LOGIC;



vga_sync_hs_next <= stdl(1) when ((signed(resize(vga_sync_h_count, 11)) >= (WIDTH + HF)) and (signed(resize(vga_sync_h_count, 11)) <= (((WIDTH + HF) + HR) - 1))) else stdl(0);
vga_sync_vs_next <= stdl(1) when ((signed(resize(vga_sync_v_count, 11)) >= (HEIGTH + VF)) and (signed(resize(vga_sync_v_count, 11)) <= (((HEIGTH + VF) + VR) - 1))) else stdl(0);
vga_sync_h_end <= stdl(1) when (signed(resize(vga_sync_h_count, 11)) = (PIXEL_PER_LINE - 1)) else stdl(0);
vga_sync_v_end <= stdl(1) when (signed(resize(vga_sync_v_count, 11)) = (LINES_PER_SCREEN - 1)) else stdl(0);
video_on <= stdl(1) when ((vga_sync_h_count < WIDTH) and (vga_sync_v_count < HEIGTH)) else stdl(0);
h_sync <= vga_sync_hsync_reg;
v_sync <= vga_sync_vsync_reg;
pixel_x <= vga_sync_h_count;
pixel_y <= vga_sync_v_count;


VGA_CONTROLLER_VGA_SYNC_HOR_COUNTER: process (vga_sync_h_count, vga_sync_h_end) is
begin
    if bool(vga_sync_h_end) then
        vga_sync_hc_next <= to_unsigned(0, 10);
    else
        vga_sync_hc_next <= (vga_sync_h_count + 1);
    end if;
end process VGA_CONTROLLER_VGA_SYNC_HOR_COUNTER;


VGA_CONTROLLER_VGA_SYNC_VER_COUNTER: process (vga_sync_v_count, vga_sync_h_end, vga_sync_v_end) is
begin
    if bool(vga_sync_h_end) then
        if bool(vga_sync_v_end) then
            vga_sync_vc_next <= to_unsigned(0, 10);
        else
            vga_sync_vc_next <= (vga_sync_v_count + 1);
        end if;
    else
        vga_sync_vc_next <= vga_sync_v_count;
    end if;
end process VGA_CONTROLLER_VGA_SYNC_VER_COUNTER;


VGA_CONTROLLER_PIXEL_GEN_LOGIC: process (clk, rst) is
begin
    if bool(rst) then
        pixel_gen_red <= to_unsigned(0, 8);
        pixel_gen_green <= to_unsigned(0, 8);
        pixel_gen_blue <= to_unsigned(0, 8);
    elsif rising_edge(clk) then
        pixel_gen_red <= pixel_gen_rnext;
        pixel_gen_green <= pixel_gen_gnext;
        pixel_gen_blue <= pixel_gen_bnext;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_LOGIC;



r <= std_logic_vector(pixel_gen_red);
g <= std_logic_vector(pixel_gen_green);
b <= std_logic_vector(pixel_gen_blue);



pixel_gen_pixel_gen_refr_tick <= stdl(1) when ((pixel_x = 0) and (signed(resize(pixel_y, 11)) = (HEIGHT + 1))) else stdl(0);



pixel_gen_pixel_gen_wall_on <= stdl(1) when ((WALL_X_L <= pixel_x) and (pixel_x <= WALL_X_R)) else stdl(0);
pixel_gen_pixel_gen_wall_rgb <= to_unsigned(MAX_COLOR, 24);



pixel_gen_pixel_gen_bar_yt <= pixel_gen_pixel_gen_bar_yreg;



pixel_gen_pixel_gen_bar_yb <= ((pixel_gen_pixel_gen_bar_yt + BAR_Y_SIZE) - 1);



pixel_gen_pixel_gen_bar_on <= stdl(1) when ((BAR_X_L <= pixel_x) and (pixel_x <= BAR_X_R) and (pixel_gen_pixel_gen_bar_yt <= pixel_y) and (pixel_y <= pixel_gen_pixel_gen_bar_yb)) else stdl(0);
pixel_gen_pixel_gen_bar_rgb <= unsigned'(to_unsigned(0, 8) & to_unsigned(255, 8) & to_unsigned(0, 8));
pixel_gen_pixel_gen_bar_yreg <= pixel_gen_pixel_gen_bar_logic_bar_yreg;


VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BAR_LOGIC_CLOCKED_LOGIC: process (clk, rst) is
begin
    if bool(rst) then
        pixel_gen_pixel_gen_bar_logic_bar_yreg <= to_unsigned(0, 10);
    elsif rising_edge(clk) then
        pixel_gen_pixel_gen_bar_logic_bar_yreg <= pixel_gen_pixel_gen_bar_logic_bar_yr_next;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BAR_LOGIC_CLOCKED_LOGIC;


VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BAR_LOGIC_ANIMATION: process (pixel_gen_pixel_gen_bar_logic_bar_yreg, pixel_gen_pixel_gen_bar_yb, pixel_gen_pixel_gen_bar_yt, pixel_gen_pixel_gen_refr_tick, data) is
begin
    pixel_gen_pixel_gen_bar_logic_bar_yr_next <= pixel_gen_pixel_gen_bar_logic_bar_yreg;
    if bool(pixel_gen_pixel_gen_refr_tick) then
        if (bool(unsigned(data)(1)) and (signed(resize(pixel_gen_pixel_gen_bar_yb, 11)) < ((HEIGHT - 1) - BAR_VELOCITY))) then
            pixel_gen_pixel_gen_bar_logic_bar_yr_next <= (pixel_gen_pixel_gen_bar_logic_bar_yreg + BAR_VELOCITY);
        elsif (bool(unsigned(data)(0)) and (pixel_gen_pixel_gen_bar_yb > BAR_VELOCITY)) then
            pixel_gen_pixel_gen_bar_logic_bar_yr_next <= (pixel_gen_pixel_gen_bar_logic_bar_yreg - BAR_VELOCITY);
        end if;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BAR_LOGIC_ANIMATION;


VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BALL_LOGIC_CLOCKED_LOGIC: process (clk, rst) is
begin
    if bool(rst) then
        pixel_gen_pixel_gen_ball_logic_ball_xreg <= to_unsigned(0, 10);
        pixel_gen_pixel_gen_ball_logic_ball_yreg <= to_unsigned(0, 10);
        pixel_gen_pixel_gen_ball_logic_x_delta_reg <= to_unsigned(4, 10);
        pixel_gen_pixel_gen_ball_logic_y_delta_reg <= to_unsigned(4, 10);
    elsif rising_edge(clk) then
        pixel_gen_pixel_gen_ball_logic_ball_xreg <= pixel_gen_pixel_gen_ball_logic_ball_xr_next;
        pixel_gen_pixel_gen_ball_logic_ball_yreg <= pixel_gen_pixel_gen_ball_logic_ball_yr_next;
        pixel_gen_pixel_gen_ball_logic_x_delta_reg <= pixel_gen_pixel_gen_ball_logic_xd_next;
        pixel_gen_pixel_gen_ball_logic_y_delta_reg <= pixel_gen_pixel_gen_ball_logic_yd_next;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BALL_LOGIC_CLOCKED_LOGIC;



pixel_gen_pixel_gen_ball_logic_ball_xl <= pixel_gen_pixel_gen_ball_logic_ball_xreg;
pixel_gen_pixel_gen_ball_logic_ball_yt <= pixel_gen_pixel_gen_ball_logic_ball_yreg;



pixel_gen_pixel_gen_ball_logic_ball_yb <= ((pixel_gen_pixel_gen_ball_logic_ball_yt + BALL_SIZE) - 1);
pixel_gen_pixel_gen_ball_logic_ball_xr <= ((pixel_gen_pixel_gen_ball_logic_ball_xl + BALL_SIZE) - 1);



pixel_gen_pixel_gen_ball_on <= stdl(1) when ((pixel_gen_pixel_gen_ball_logic_ball_xl <= pixel_x) and (pixel_x <= pixel_gen_pixel_gen_ball_logic_ball_xr) and (pixel_gen_pixel_gen_ball_logic_ball_yt <= pixel_y) and (pixel_y <= pixel_gen_pixel_gen_ball_logic_ball_yb)) else stdl(0);
pixel_gen_pixel_gen_ball_logic_rom_addr <= (pixel_y(3-1 downto 0) - pixel_gen_pixel_gen_ball_logic_ball_yt(3-1 downto 0));
pixel_gen_pixel_gen_ball_logic_rom_col <= (pixel_x(3-1 downto 0) - pixel_gen_pixel_gen_ball_logic_ball_xl(3-1 downto 0));



pixel_gen_pixel_gen_ball_rgb <= unsigned'(to_unsigned(255, 8) & to_unsigned(0, 16));
pixel_gen_pixel_gen_ball_logic_ball_xr_next <= (pixel_gen_pixel_gen_ball_logic_ball_xreg + pixel_gen_pixel_gen_ball_logic_x_delta_reg) when bool(pixel_gen_pixel_gen_refr_tick) else pixel_gen_pixel_gen_ball_logic_ball_xreg;
pixel_gen_pixel_gen_ball_logic_ball_yr_next <= (pixel_gen_pixel_gen_ball_logic_ball_yreg + pixel_gen_pixel_gen_ball_logic_y_delta_reg) when bool(pixel_gen_pixel_gen_refr_tick) else pixel_gen_pixel_gen_ball_logic_ball_yreg;


VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BALL_LOGIC_BALL_VELOCITY: process (pixel_gen_pixel_gen_ball_logic_x_delta_reg, pixel_gen_pixel_gen_ball_logic_y_delta_reg, pixel_gen_pixel_gen_ball_logic_ball_yt, pixel_gen_pixel_gen_ball_logic_ball_yb, pixel_gen_pixel_gen_ball_logic_ball_xl, pixel_gen_pixel_gen_ball_logic_ball_xr, pixel_gen_pixel_gen_bar_yt, pixel_gen_pixel_gen_bar_yb) is
begin
    pixel_gen_pixel_gen_ball_logic_xd_next <= pixel_gen_pixel_gen_ball_logic_x_delta_reg;
    pixel_gen_pixel_gen_ball_logic_yd_next <= pixel_gen_pixel_gen_ball_logic_y_delta_reg;
    if (pixel_gen_pixel_gen_ball_logic_ball_yt < 1) then
        pixel_gen_pixel_gen_ball_logic_yd_next <= to_unsigned(BALL_VELOCITY_POS, 10);
    elsif (signed(resize(pixel_gen_pixel_gen_ball_logic_ball_yb, 11)) > (HEIGHT - 1)) then
        pixel_gen_pixel_gen_ball_logic_yd_next <= to_unsigned(BALL_VELOCITY_NEG, 10);
    elsif (pixel_gen_pixel_gen_ball_logic_ball_xl <= WALL_X_R) then
        pixel_gen_pixel_gen_ball_logic_xd_next <= to_unsigned(BALL_VELOCITY_POS, 10);
    elsif ((BAR_X_L <= pixel_gen_pixel_gen_ball_logic_ball_xr) and (pixel_gen_pixel_gen_ball_logic_ball_xr <= BAR_X_R)) then
        if ((pixel_gen_pixel_gen_bar_yt <= pixel_gen_pixel_gen_ball_logic_ball_yb) and (pixel_gen_pixel_gen_ball_logic_ball_yt <= pixel_gen_pixel_gen_bar_yb)) then
            pixel_gen_pixel_gen_ball_logic_xd_next <= to_unsigned(BALL_VELOCITY_NEG, 10);
        end if;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BALL_LOGIC_BALL_VELOCITY;


VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BALL_LOGIC_ROM_LOOKUP: process (pixel_gen_pixel_gen_ball_logic_rom_addr) is
begin
    case to_integer(pixel_gen_pixel_gen_ball_logic_rom_addr) is
        when 0 => pixel_gen_pixel_gen_ball_logic_rom_data <= "00111100";
        when 1 => pixel_gen_pixel_gen_ball_logic_rom_data <= "01111110";
        when 2 => pixel_gen_pixel_gen_ball_logic_rom_data <= "11111111";
        when 3 => pixel_gen_pixel_gen_ball_logic_rom_data <= "11111111";
        when 4 => pixel_gen_pixel_gen_ball_logic_rom_data <= "11111111";
        when 5 => pixel_gen_pixel_gen_ball_logic_rom_data <= "11111111";
        when 6 => pixel_gen_pixel_gen_ball_logic_rom_data <= "01111110";
        when others => pixel_gen_pixel_gen_ball_logic_rom_data <= "00111100";
    end case;
end process VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_BALL_LOGIC_ROM_LOOKUP;



pixel_gen_pixel_gen_ball_logic_rom_bit <= pixel_gen_pixel_gen_ball_logic_rom_data(to_integer(pixel_gen_pixel_gen_ball_logic_rom_col));



pixel_gen_pixel_gen_rd_ball_on <= stdl(1) when (bool(pixel_gen_pixel_gen_ball_on) and bool(pixel_gen_pixel_gen_ball_logic_rom_bit)) else stdl(0);


VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_PIXEL_SELECT: process (video_on, pixel_gen_pixel_gen_wall_on, pixel_gen_pixel_gen_bar_on, pixel_gen_pixel_gen_rd_ball_on, pixel_gen_pixel_gen_wall_rgb, pixel_gen_pixel_gen_bar_rgb, pixel_gen_pixel_gen_ball_rgb) is
begin
    if (not bool(video_on)) then
        pixel_gen_rnext <= to_unsigned(0, 8);
        pixel_gen_gnext <= to_unsigned(0, 8);
        pixel_gen_bnext <= to_unsigned(0, 8);
    else
        if bool(pixel_gen_pixel_gen_wall_on) then
            pixel_gen_rnext <= pixel_gen_pixel_gen_wall_rgb(COLOR_BITS-1 downto RED_BITS_MIN);
            pixel_gen_gnext <= pixel_gen_pixel_gen_wall_rgb(RED_BITS_MIN-1 downto GREEN_BITS_MIN);
            pixel_gen_bnext <= pixel_gen_pixel_gen_wall_rgb(GREEN_BITS_MIN-1 downto 0);
        elsif bool(pixel_gen_pixel_gen_bar_on) then
            pixel_gen_rnext <= pixel_gen_pixel_gen_bar_rgb(COLOR_BITS-1 downto RED_BITS_MIN);
            pixel_gen_gnext <= pixel_gen_pixel_gen_bar_rgb(RED_BITS_MIN-1 downto GREEN_BITS_MIN);
            pixel_gen_bnext <= pixel_gen_pixel_gen_bar_rgb(GREEN_BITS_MIN-1 downto 0);
        elsif bool(pixel_gen_pixel_gen_rd_ball_on) then
            pixel_gen_rnext <= pixel_gen_pixel_gen_ball_rgb(COLOR_BITS-1 downto RED_BITS_MIN);
            pixel_gen_gnext <= pixel_gen_pixel_gen_ball_rgb(RED_BITS_MIN-1 downto GREEN_BITS_MIN);
            pixel_gen_bnext <= pixel_gen_pixel_gen_ball_rgb(GREEN_BITS_MIN-1 downto 0);
        else
            pixel_gen_rnext <= to_unsigned(MAX_COLOR / 8, 8);
            pixel_gen_gnext <= to_unsigned(MAX_COLOR / 8, 8);
            pixel_gen_bnext <= to_unsigned(MAX_COLOR / 8, 8);
        end if;
    end if;
end process VGA_CONTROLLER_PIXEL_GEN_PIXEL_GEN_PIXEL_SELECT;

end architecture ScryverDesign;
